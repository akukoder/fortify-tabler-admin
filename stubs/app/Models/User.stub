<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Fortify\TwoFactorAuthenticatable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable, TwoFactorAuthenticatable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'username',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * If the user avatar is empty, generate one using online service
     *
     * @return mixed|string
     */
    public function getAvatarUrl()
    {
        return ! empty($this->avatar) ?
            Storage::url('avatars/'.$this->avatar) :
            config('avatar.service_url').'?name='.urlencode($this->name).'&color=fff&background='.substr(md5($this->name), 0, 6).'&size='.config('avatar.size');
    }

    /**
     * Load user specific settings
     *
     * @param string $key
     * @param null $default
     * @return false|mixed
     */
    public function settings(string $key, $default = null)
    {
        settings()->setExtraColumns([
            'user_id' => $this->id
        ]);

        if (settings()->has($key)) {
            return settings()->get($key);
        }

        return $default;
    }
}
